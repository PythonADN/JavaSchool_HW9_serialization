package annotations;
import java.lang.annotation.*;

import static annotations.CacheType.*;

/**
 * 1. cacheType - Указывать с помощью аннотаций, какие методы кешировать и как: Просчитанный результат хранить в памяти JVM или сериализовывать в файле на диск.
 * 2. identityBy - Возможность указывать, какие аргументы метода учитывать при определении уникальности результата, а какие игнорировать(по умолчанию все аргументы учитываются).
 * Например, должна быть возможность указать, что doHardWork() должен игнорировать значение второго аргумента, уникальность определяется только по String аргументу.
 * double r1 = service.doHardWork("work1", 10); //считает результат
 * double r2 = service.doHardWork("work1", 5);  // результат из кеша, несмотря на то что  второй аргумент различается
 * 3. listList - Если возвращаемый тип это List – возможность указывать максимальное количество элементов в нем.
 * То есть, если нам возвращается List с size = 1млн, мы можем сказать что в кеше достаточно хранить 100т элементов.
 * 4. fileNamePrefix - Возможность указывать название файла/ключа по которому будем храниться значение. Если не задано - использовать имя метода.
 * 5. zip - Если мы сохраняем результат на диск, должна быть возможность указать, что данный файл надо дополнительно сжимать в zip архив.
 * 6. - Любые полезные настройки на ваш вкус.
 * 7. Все настройки кеша должны быть optional и иметь дефолтные настройки.
 * 8. Все возможные исключения должны быть обработаны с понятным описание, что делать, чтобы избежать ошибок.
 * (Например, если вы пытаетесь сохранить на диск результат метода, но данный результат не сериализуем, надо кинуть исключение с понятным описанием как это исправить)
 * 9. Логика по кешированию должна навешиваться с помощью DynamicProxy. Должен быть класс CacheProxy с методом cache(),
 * который принимает ссылку на сервис и возвращает кешированную версию этого сервиса.
 * CacheProxy должен тоже принимать в конструкторе некоторые настройки, например рутовую папку в которой хранить файлы, дефолтные настройки кеша и тд.
 */

@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.METHOD)
@Inherited
public @interface Cache {
    CacheType cacheType() default FILE;
    int[] identityBy() default {}; // какие аргументы игнорировать при поиске кеша
    int listSize() default -1;
    String fileNamePrefix() default "";
    boolean zip() default false;
}


